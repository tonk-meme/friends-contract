#include "imports/stdlib.fc";
#include "imports/consts.fc";

(slice, slice, slice, int) load_data() inline {
    slice ds = get_data().begin_parse();
    slice addresses = ds~load_ref().begin_parse();
    slice router_address = addresses~load_msg_addr();
    slice user_address = addresses~load_msg_addr();
    slice follower_wallet_address = addresses~load_msg_addr();
    int my_shares = ds~load_uint(256);
    ds.end_parse();

    return (router_address, user_address, follower_wallet_address, my_shares);
}

() save_data(slice router_address, slice user_address, slice follower_wallet_address, int my_shares) impure inline {
    builder db = begin_cell()
                 .store_ref(begin_cell()
                            .store_slice(router_address)
                            .store_slice(user_address)
                            .store_slice(follower_wallet_address)
                            .end_cell())
                 .store_uint(my_shares, 256);

    set_data(db.end_cell());
}

() sell_shares(slice user_address, slice follower_wallet_address, int required_shares) impure inline {
    cell msg_body = begin_cell()
                    .store_uint(OP::SELL_SHARES(), 32) ;; op_code
                    .store_uint(0, 64) ;; query_id
                    .store_slice(follower_wallet_address)
                    .store_uint(required_shares, 256)
                    .end_cell();
    
    cell msg_full = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(user_address)
                    .store_coins(0)
                    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(msg_body)
                    .end_cell();
    
    send_raw_message(msg_full, MODE::CARRY_REMAINING_FROM_INBOUND());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; bounced message handler
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == OP::BUY_SHARES()) {
        (slice router_address, slice user_address, slice follower_wallet_address, int my_shares) = load_data();
        throw_unless(ERROR::ACCESS_DENIED(), equal_slices(sender_address, user_address));
        int new_shares = in_msg_body~load_uint(256);
        my_shares += new_shares;
        save_data(router_address, user_address, follower_wallet_address, my_shares);
        return ();
    }

    if(op == OP::SELL_SHARES()) {
        (slice router_address, slice user_address, slice follower_wallet_address, int my_shares) = load_data();
        throw_unless(ERROR::ACCESS_DENIED(), equal_slices(sender_address, router_address));
        int required_shares = in_msg_body~load_uint(256);
        throw_unless(ERROR::NOT_ENOUGH_SHARES_TO_SELL(), required_shares <= my_shares);
        sell_shares(user_address, follower_wallet_address, required_shares);
        my_shares -= required_shares;
        save_data(router_address, user_address, follower_wallet_address, my_shares);
        return ();
    }

    throw(0xffff);
}

(int) get_my_shares() method_id {
    (slice router_address, slice user_address, slice follower_wallet_address, int my_shares) = load_data();
    return my_shares;
}
