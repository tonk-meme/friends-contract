#include "imports/stdlib.fc";
#include "imports/consts.fc";

(slice, slice, int, slice, int, int, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    slice router_address = ds~load_msg_addr();
    slice user_wallet_address = ds~load_msg_addr();
    int total_shares = ds~load_uint(256);
    slice fees = ds~load_ref().begin_parse();
    slice protocol_fee_destination = fees~load_msg_addr();
    int protocol_fee_percent = fees~load_uint(8);
    int owner_fee_percent = fees~load_uint(8);
    cell follower_contract_code = ds~load_ref();
    ds.end_parse();

    return (router_address, user_wallet_address, total_shares, protocol_fee_destination, protocol_fee_percent, owner_fee_percent, follower_contract_code);
}

() save_data(slice router_address, slice user_wallet_address, int total_shares, slice protocol_fee_destination, int protocol_fee_percent, int owner_fee_percent, cell follower_contract_code) impure inline {
    builder db = begin_cell()
                .store_slice(router_address)
                .store_slice(user_wallet_address)
                .store_uint(total_shares, 256)
                .store_ref(begin_cell()
                          .store_slice(protocol_fee_destination)
                          .store_uint(protocol_fee_percent, 8)
                          .store_uint(owner_fee_percent, 8)
                          .end_cell())
                .store_ref(follower_contract_code);

    set_data(db.end_cell());
}

(slice) calculate_follower_address(slice follower_wallet_address) inline { ;; need update
    (slice router_address, slice user_wallet_address, int total_shares, slice protocol_fee_destination, int protocol_fee_percent, int owner_fee_percent, cell follower_contract_code) = load_data();

    cell initial_data = begin_cell()
                        .store_ref(begin_cell()
                                   .store_slice(router_address) ;; router_address
                                   .store_slice(my_address()) ;; user_address
                                   .store_slice(follower_wallet_address)
                                   .end_cell())
                        .store_uint(0, 256) ;; initial my_shares
                        .end_cell();

    cell state_init = begin_cell()
                      .store_uint(0, 2)
                      .store_dict(follower_contract_code)
                      .store_dict(initial_data)
                      .store_uint(0, 1)
                      .end_cell();

    slice follower_address = begin_cell()
                                  .store_uint(4, 3)
                                  .store_int(0, 8) ;; workchain
                                  .store_uint(cell_hash(state_init), 256)
                                  .end_cell()
                                  .begin_parse();

    return follower_address;
}

(slice, cell) calculate_follower_address_and_state_init(slice follower_wallet_address) inline { ;; need update
    (slice router_address, slice user_wallet_address, int total_shares, slice protocol_fee_destination, int protocol_fee_percent, int owner_fee_percent, cell follower_contract_code) = load_data();

    cell initial_data = begin_cell()
                        .store_ref(begin_cell()
                                   .store_slice(router_address) ;; router_address
                                   .store_slice(my_address()) ;; user_address
                                   .store_slice(follower_wallet_address)
                                   .end_cell())
                        .store_uint(0, 256) ;; initial my_shares
                        .end_cell();

    cell state_init = begin_cell()
                      .store_uint(0, 2)
                      .store_dict(follower_contract_code)
                      .store_dict(initial_data)
                      .store_uint(0, 1)
                      .end_cell();

    slice follower_address = begin_cell()
                                  .store_uint(4, 3)
                                  .store_int(0, 8) ;; workchain
                                  .store_uint(cell_hash(state_init), 256)
                                  .end_cell()
                                  .begin_parse();

    return (follower_address, state_init);
}

(int) calculate_price(int total_shares, int shares_number) inline {
    int sum1 = (total_shares == 0) ? 0 : (total_shares - 1 )* (total_shares) * (2 * (total_shares - 1) + 1) / 6;
    int sum2 = ((total_shares == 0) & (shares_number == 1)) ? 0 : (total_shares - 1 + shares_number) * (total_shares + shares_number) * (2 * (total_shares - 1 + shares_number) + 1) / 6;
    return (sum2 - sum1) * FEE::ONE_TON();
}

() update_follower(slice follower_wallet_address, int shares_number) impure inline {
    (slice follower_address, cell state_init) = calculate_follower_address_and_state_init(follower_wallet_address);

    cell msg_body = begin_cell()
                    .store_uint(OP::BUY_SHARES(), 32)
                    .store_uint(0, 64)
                    .store_uint(shares_number, 256)
                    .end_cell();

    cell msg_full = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(follower_address)
                    .store_coins(FEE::BUY_UPDATE_GAS())
                    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                    .store_ref(state_init)
                    .store_ref(msg_body)
                    .end_cell();
    
    send_raw_message(msg_full, MODE::ORDINARY_MESSAGE());
}

() simple_transfer(slice receiver, int ton_amount, int mode) impure inline {
    send_raw_message(
        begin_cell()
        .store_uint(0x18, 6)
        .store_slice(receiver)
        .store_coins(ton_amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell(), mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; bounced message handler
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == OP::BUY_SHARES()) {
        (slice router_address, slice user_wallet_address, int total_shares, slice protocol_fee_destination, int protocol_fee_percent, int owner_fee_percent, cell follower_contract_code) = load_data();
        throw_unless(ERROR::ACCESS_DENIED(), equal_slices(sender_address, router_address));
        slice follower_wallet_address = in_msg_body~load_msg_addr();
        if(total_shares == 0) {
            ifnot(equal_slices(follower_wallet_address, user_wallet_address)) {
                simple_transfer(follower_wallet_address, 0, MODE::CARRY_REMAINING_FROM_INBOUND());
                return ();
                ;; optimization: throw and check bounced in router bouncing part
            }
        }
        int shares_number = in_msg_body~load_uint(256);
        int shares_price = calculate_price(total_shares, shares_number);
        ifnot(msg_value >= (((shares_price * (100 + protocol_fee_percent + owner_fee_percent)) / 100) + FEE::CALCULATION_FEE())) {
            simple_transfer(follower_wallet_address, 0, MODE::CARRY_REMAINING_FROM_INBOUND());
            return ();
            ;; optimization: throw and check bounced in router bouncing part
            ;; optimization: if msg_value is more than enough, send the left amount to follower
        }
        update_follower(follower_wallet_address, shares_number);
        ifnot(shares_price == 0) {
            ifnot(protocol_fee_percent == 0) {
                simple_transfer(protocol_fee_destination, (shares_price * protocol_fee_percent) / 100, MODE::ORDINARY_MESSAGE());
            }

            ifnot(owner_fee_percent == 0) {
                simple_transfer(user_wallet_address, (shares_price * owner_fee_percent) / 100, MODE::ORDINARY_MESSAGE());
            }
        }
        total_shares += shares_number;
        save_data(router_address, user_wallet_address, total_shares, protocol_fee_destination, protocol_fee_percent, owner_fee_percent, follower_contract_code);
        return ();
    }

    if(op == OP::SELL_SHARES()) {
        (slice router_address, slice user_wallet_address, int total_shares, slice protocol_fee_destination, int protocol_fee_percent, int owner_fee_percent, cell follower_contract_code) = load_data();
        slice follower_wallet_address = in_msg_body~load_msg_addr();
        slice follower_address = calculate_follower_address(follower_wallet_address);
        throw_unless(ERROR::ACCESS_DENIED(), equal_slices(sender_address, follower_address));
        int shares_number = in_msg_body~load_uint(256);
        if(shares_number >= total_shares) {
            update_follower(follower_wallet_address, shares_number); ;; optimization: throw and check bounced in follower bouncing part
            return ();
        }
        int shares_price = calculate_price(total_shares - shares_number, shares_number);
        simple_transfer(follower_wallet_address, (shares_price * (100 - protocol_fee_percent - owner_fee_percent)) / 100, MODE::ORDINARY_MESSAGE());
        simple_transfer(protocol_fee_destination, (shares_price * protocol_fee_percent) / 100, MODE::ORDINARY_MESSAGE());
        simple_transfer(user_wallet_address, (shares_price * owner_fee_percent) / 100, MODE::ORDINARY_MESSAGE());
        total_shares -= shares_number;
        save_data(router_address, user_wallet_address, total_shares, protocol_fee_destination, protocol_fee_percent, owner_fee_percent, follower_contract_code);
        return ();
    }

    throw(0xffff);
}

(slice) get_follower_address(slice follower_wallet_address) method_id {
    (slice follower_address, _) = calculate_follower_address_and_state_init(follower_wallet_address);
    return follower_address;
}

(int) get_total_shares() method_id {
    (slice router_address, slice user_wallet_address, int total_shares, slice protocol_fee_destination, int protocol_fee_percent, int owner_fee_percent, cell follower_contract_code) = load_data();
    return total_shares;
}

(int) get_buy_price(int shares_number) method_id {
    (slice router_address, slice user_wallet_address, int total_shares, slice protocol_fee_destination, int protocol_fee_percent, int owner_fee_percent, cell follower_contract_code) = load_data();
    int shares_price = calculate_price(total_shares, shares_number);
    return (shares_price * (100 + protocol_fee_percent + owner_fee_percent)) / 100 + FEE::CALCULATION_FEE();
}

(int) get_sell_price(int shares_number) method_id {
    (slice router_address, slice user_wallet_address, int total_shares, slice protocol_fee_destination, int protocol_fee_percent, int owner_fee_percent, cell follower_contract_code) = load_data();
    int shares_price = calculate_price(total_shares - shares_number, shares_number);
    return (shares_price * (100 - protocol_fee_percent - owner_fee_percent)) / 100;
}
